// ローカルスコープの変数は、関数の処理が終わると無くなってしまうのが普通ですが、関数fの出力結果を見る限りは、なぜか保持されているのが確認できます
// グローバル変数をつかわないでこの処理を実現することができるのがクロージャーのメリットの1つです。

// この関数fと、保持されている外側の関数（エンクロージャ）のローカル変数をひっくるめてクロージャと呼びます。
var f = function() {
  var i = 0;             // 関数fの内部からしかアクセスできないこの変数を、「レキシカル変数」と呼びます。
  return function() {
    return i++;
  }
}();
console.log(f());// 0を出力
console.log(f());// 1を出力
console.log(f());// 2を出力
