# 概要
Javascriptのイテレータとジェネレータについて

# イテレータとは

イテレータとは次の２つを満たす「順番にイテレータリザルトを取り出すことのできるオブジェクト」のこと
- .next() メソッドを持つ こと
- .next() を実行すると イテレータリザルト を返す こと

イテレータは次の２つを持っています
- .value プロパティ は、イテレータから取り出した 値（アイテム）
- .done プロパティ は、イテレータから値を順番に取り出し終えたかどうかの 真偽値


配列には次の２つのメソッドがある
- .keys()メソッド: これは配列のキーを順番に取り出す イテレータ を取得できます
- .entries()メソッド: これは配列のキーと値がセットになった配列を順番に取り出す イテレータ を取得できます


次を実行するとそのイテレータ自身を返す
```
[Symbol.iterator]() メソッドを実行すると イテレータ を返す
つまり
var iterator = obj[Symbol.iterator](); とするとobj自信を返す
```

ほかにも次のような記法によりイテラブルになります。
```
func(...iterable) 
var connectedAry = [...ary, ...str];
```

# ジェネレータとは
普通の関数と異なるのは次の２つです
- ジェネレータ関数はfunction のあとに * を記述する必要がある
- ジェネレータ関数 では、yield 及び yield* を使うことができる

以下、サンプル
```
function* gfn(from, to){ while(from <= to) yield from++; }
```

.next()する毎に次のyieldまで進めることができる。  
yield*を使うとイテラブルなオブジェクトを作成することができ、yieldを簡潔に記述することができる。  

ジェネレータ関数で生成されたオブジェクトはdoneを表示することでジェネレータが最後まで完了しているかどうかを確認できる。



# 参考URL
- イテレータ
  - http://qiita.com/kura07/items/cf168a7ea20e8c2554c6
